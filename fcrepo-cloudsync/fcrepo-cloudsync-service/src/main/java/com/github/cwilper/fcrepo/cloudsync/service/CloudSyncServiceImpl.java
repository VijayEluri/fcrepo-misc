package com.github.cwilper.fcrepo.cloudsync.service;

import com.github.cwilper.fcrepo.cloudsync.api.CloudSyncService;
import com.github.cwilper.fcrepo.cloudsync.api.Configuration;
import com.github.cwilper.fcrepo.cloudsync.api.ObjectInfo;
import com.github.cwilper.fcrepo.cloudsync.api.ObjectSet;
import com.github.cwilper.fcrepo.cloudsync.api.ObjectStore;
import com.github.cwilper.fcrepo.cloudsync.api.SystemLog;
import com.github.cwilper.fcrepo.cloudsync.api.Task;
import com.github.cwilper.fcrepo.cloudsync.api.TaskLog;
import com.github.cwilper.fcrepo.cloudsync.api.User;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.security.core.context.SecurityContextHolder;

import javax.sql.DataSource;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class CloudSyncServiceImpl implements CloudSyncService {

    private static final Logger logger = LoggerFactory.getLogger(CloudSyncServiceImpl.class);

    private final JdbcTemplate db;

    public CloudSyncServiceImpl(DataSource dataSource) {
        db = new JdbcTemplate(dataSource);
        if (db.queryForInt("select count(*) from sys.systables where tablename = 'CLOUDSYNC'") == 0) {
            initDb();
        }
        logger.info("Service initialization complete. Ready to handle requests.");
    }

    private void initDb() {
        logger.info("First run detected. Creating database tables.");

        db.execute("create table CloudSync(schemaVersion int)");
        db.update("insert into CloudSync values (1)");

        db.execute("create table Configuration (keepSysLogDays int not null, keepTaskLogDays int not null)");
        db.execute("insert into Configuration values (-1, -1)");

        db.execute("create table Users (id int not null generated by default as identity, "
                + "name varchar(255) not null, constraint UsersPk primary key (id), "
                + "constraint UsersUnique unique (name))");
    }

    // -----------------------------------------------------------------------
    //                            Configuration
    // -----------------------------------------------------------------------

    @Override
    public Configuration getConfiguration() {
        return db.query("select * from Configuration",
                new ResultSetExtractor<Configuration>() {
                    public Configuration extractData(ResultSet rs)
                            throws SQLException {
                        rs.next();
                        Configuration c = new Configuration();
                        c.keepSysLogDays = rs.getInt("keepSysLogDays");
                        c.keepTaskLogDays = rs.getInt("keepTaskLogDays");
                        return c;
                    }
                });
    }

    @Override
    public Configuration updateConfiguration(Configuration configuration) {
        Configuration updated = getConfiguration();
        if (configuration.keepSysLogDays != null) {
            updated.keepSysLogDays = configuration.keepSysLogDays;
        }
        if (configuration.keepTaskLogDays != null) {
            updated.keepTaskLogDays = configuration.keepTaskLogDays;
        }
        db.update("update Configuration set keepSysLogDays = ?, keepTaskLogDays = ?",
                updated.keepSysLogDays, updated.keepTaskLogDays);
        return updated;
    }

    // -----------------------------------------------------------------------
    //                                Users
    // -----------------------------------------------------------------------

    // returns null if the user name conflicts with an existing one
    @Override
    public User createUser(final User user) {
        if (user.name == null || user.name.trim().length() == 0) {
            throw new IllegalArgumentException("User.name must be specified");
        }
        KeyHolder keyHolder = new GeneratedKeyHolder();
        try {
            db.update(new PreparedStatementCreator() {
                public PreparedStatement createPreparedStatement(Connection conn)
                        throws SQLException {
                    PreparedStatement ps = conn.prepareStatement(
                            "insert into Users (name) values (?)",
                            new String[] { "ID" }); // must be caps
                    ps.setString(1, user.name.trim());
                    return ps;
                }
            }, keyHolder);
            return getUser(keyHolder.getKey().toString());
        } catch (DuplicateKeyException e) {
            return null;
        }
    }

    @Override
    public List<User> listUsers() {
        List<User> list = new ArrayList<User>();
        User user = new User();
        user.id = "1";
        list.add(user);
        return list;
    }

    @Override
    public User getUser(String id) {
        return db.query("select * from Users where id = ?",
                new ResultSetExtractor<User>() {
                    public User extractData(ResultSet rs)
                            throws SQLException {
                        if (rs.next()) {
                            User u = new User();
                            u.id = "" + rs.getInt("id");
                            u.name = rs.getString("name");
                            return u;
                        } else {
                            return null;
                        }
                    }
                },
                Integer.parseInt(id));
    }

    @Override
    public User getCurrentUser() {
        User user = new User();
        user.id = "9";
        org.springframework.security.core.userdetails.User u =
                (org.springframework.security.core.userdetails.User)
                SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        user.name = u.getUsername();
        return user;
    }

    @Override
    public User updateUser(String id, User user) {
        User u = new User();
        u.id = user.id;
        return u;
    }

    @Override
    public void deleteUser(String id) {
    }

    // -----------------------------------------------------------------------
    //                                Tasks
    // -----------------------------------------------------------------------

    @Override
    public Task createTask(Task task) {
        return task;
    }

    @Override
    public List<Task> listTasks() {
        List<Task> list = new ArrayList<Task>();
        Task item = new Task();
        item.id = "1";
        list.add(item);
        return list;
    }

    @Override
    public Task getTask(String id) {
        Task item = new Task();
        item.id = id;
        return item;
    }

    @Override
    public Task updateTask(String id, Task task) {
        return task;
    }

    @Override
    public void deleteTask(String id) {
    }

    // -----------------------------------------------------------------------
    //                             Object Sets
    // -----------------------------------------------------------------------

    @Override
    public ObjectSet createObjectSet(ObjectSet objectSet) {
        return objectSet;
    }

    @Override
    public List<ObjectSet> listObjectSets() {
        List<ObjectSet> list = new ArrayList<ObjectSet>();
        ObjectSet item = new ObjectSet();
        item.id = "1";
        list.add(item);
        return list;
    }

    @Override
    public ObjectSet getObjectSet(String id) {
        ObjectSet item = new ObjectSet();
        item.id = "1";
        return item;
    }

    @Override
    public ObjectSet updateObjectSet(String id, ObjectSet objectSet) {
        return objectSet;
    }

    @Override
    public void deleteObjectSet(String id) {
    }

    // -----------------------------------------------------------------------
    //                            Object Stores
    // -----------------------------------------------------------------------

    @Override
    public ObjectStore createObjectStore(ObjectStore objectStore) {
        return objectStore;
    }

    @Override
    public List<ObjectStore> listObjectStores() {
        List<ObjectStore> list = new ArrayList<ObjectStore>();
        ObjectStore item = new ObjectStore();
        item.id = "1";
        list.add(item);
        return list;
    }

    @Override
    public ObjectStore getObjectStore(String id) {
        ObjectStore item = new ObjectStore();
        item.id = id;
        return item;
    }

    @Override
    public List<ObjectInfo> queryObjectStore(String id, String set, long limit, long offset) {
        List<ObjectInfo> list = new ArrayList<ObjectInfo>();
        ObjectInfo item = new ObjectInfo();
        item.pid = "test:object1";
        list.add(item);
        return list;
    }

    @Override
    public ObjectStore updateObjectStore(String id, ObjectStore objectStore) {
        return objectStore;
    }

    @Override
    public void deleteObjectStore(String id) {
    }

    // -----------------------------------------------------------------------
    //                             System Logs
    // -----------------------------------------------------------------------

    @Override
    public List<SystemLog> listSystemLogs() {
        List<SystemLog> list = new ArrayList<SystemLog>();
        SystemLog item = new SystemLog();
        item.id = "1";
        list.add(item);
        return list;
    }

    @Override
    public SystemLog getSystemLog(String id) {
        SystemLog item = new SystemLog();
        item.id = id;
        return item;
    }

    @Override
    public InputStream getSystemLogContent(String id) {
        try {
            return new ByteArrayInputStream(("System log " + id + " content").getBytes("UTF-8"));
        } catch (UnsupportedEncodingException wontHappen) {
            throw new RuntimeException(wontHappen);
        }
    }

    @Override
    public void deleteSystemLog(String id) {
    }

    // -----------------------------------------------------------------------
    //                              Task Logs
    // -----------------------------------------------------------------------

    @Override
    public List<TaskLog> listTaskLogs() {
        List<TaskLog> list = new ArrayList<TaskLog>();
        TaskLog item = new TaskLog();
        item.id = "1";
        list.add(item);
        return list;
    }

    @Override
    public TaskLog getTaskLog(String id) {
        TaskLog item = new TaskLog();
        item.id = id;
        return item;
    }

    @Override
    public InputStream getTaskLogContent(String id) {
        try {
            return new ByteArrayInputStream(("Task log " + id + " content").getBytes("UTF-8"));
        } catch (UnsupportedEncodingException wontHappen) {
            throw new RuntimeException(wontHappen);
        }
    }

    @Override
    public void deleteTaskLog(String id) {
    }
}
