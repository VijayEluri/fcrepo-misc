package com.github.cwilper.fcrepo.cloudsync.service.dao;

import com.github.cwilper.fcrepo.cloudsync.api.Task;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.ArrayList;
import java.util.List;

public class TaskDao extends AbstractDao {

    private static final String CREATE_DDL =
          "CREATE TABLE Tasks (\n"
        + "  id INTEGER PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY,\n"
        + "  name VARCHAR(256) NOT NULL,\n"
        + "  type VARCHAR(32) NOT NULL,\n"
        + "  state VARCHAR(16) NOT NULL,\n"
        + "  schedule VARCHAR(1024),\n"
        + "  data VARCHAR(32672) NOT NULL,\n"
        + "  CONSTRAINT TaskUniqueName UNIQUE (name))";

    private static final String CREATE_DDL2 =
          "CREATE TABLE TaskSetDeps (\n"
        + "  taskId INT NOT NULL,\n"
        + "  setId INT NOT NULL,\n"
        + "  CONSTRAINT TaskSetDep_Task_FK FOREIGN KEY (taskId) REFERENCES Tasks (id),\n"
        + "  CONSTRAINT TaskSetDep_Set_FK FOREIGN KEY (setId) REFERENCES ObjectSets (id))";

    private static final String CREATE_DDL3 =
          "CREATE TABLE TaskStoreDeps (\n"
        + "  taskId INTEGER NOT NULL,\n"
        + "  storeId INTEGER NOT NULL,\n"
        + "  CONSTRAINT TaskStoreDep_Task_FK FOREIGN KEY (taskId) REFERENCES Tasks (id),\n"
        + "  CONSTRAINT TaskStoreDep_Store_FK FOREIGN KEY (storeId) REFERENCES ObjectStores (id))";


    int num = 0;

    public TaskDao(JdbcTemplate db) {
        super(db);
    }

    @Override
    public void initDb() {
        db.execute(CREATE_DDL);
        db.execute(CREATE_DDL2);
        db.execute(CREATE_DDL3);
    }

    public Task createTask(Task task) {

        return task;
    }

    public List<Task> listTasks() {
        List<Task> list = new ArrayList<Task>();
        for (int i = 0; i < num; i++ ) {
            Task item = new Task();
            item.setId("" + i);
            list.add(item);
        }
        num++;
        if (num == 4) {
            num = 0;
        }
        return list;
    }

    public Task getTask(String id) {
        Task item = new Task();
        item.setId(id);
        return item;
    }

    public Task updateTask(String id, Task task) {
        return task;
    }

    public void deleteTask(String id) {
    }

}