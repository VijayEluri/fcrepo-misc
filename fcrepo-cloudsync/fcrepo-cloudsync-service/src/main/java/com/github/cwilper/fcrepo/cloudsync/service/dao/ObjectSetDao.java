package com.github.cwilper.fcrepo.cloudsync.service.dao;

import com.github.cwilper.fcrepo.cloudsync.api.ObjectSet;
import com.github.cwilper.fcrepo.cloudsync.service.backend.ObjectQuery;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

public class ObjectSetDao extends AbstractDao {

    private static final String CREATE_DDL =
          "CREATE TABLE ObjectSets (\n"
        + "  id INTEGER PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY,\n"
        + "  name VARCHAR(256) NOT NULL,\n"
        + "  type VARCHAR(32) NOT NULL,\n"
        + "  data VARCHAR(32672) NOT NULL,\n"
        + "  CONSTRAINT ObjectSetUniqueName unique (name))";

    public ObjectSetDao(JdbcTemplate db) {
        super(db);
    }

    @Override
    public void initDb() {
        db.execute(CREATE_DDL);
        ObjectSet o = new ObjectSet();
        o.setName("All Objects");
        o.setType("pidPattern");
        o.setData("*");
        createObjectSet(o);
    }

    public ObjectSet createObjectSet(ObjectSet objectSet) {
        // validate and normalize objectSet fields
        new ObjectQuery(objectSet);
        String id = insert(
                "INSERT INTO ObjectSets (name, type, data) VALUES (?, ?, ?)",
                objectSet.getName(),
                objectSet.getType(),
                objectSet.getData());
        if (id == null) return null; // duplicate key
        return getObjectSet(id);
    }

    public List<ObjectSet> listObjectSets() {
        return db.query("SELECT * FROM ObjectSets",
                new RowMapper<ObjectSet>() {
                    public ObjectSet mapRow(ResultSet rs, int i) throws SQLException {
                        ObjectSet o = new ObjectSet();
                        o.setId("" + rs.getInt("id"));
                        o.setName(rs.getString("name"));
                        o.setType(rs.getString("type"));
                        o.setData(rs.getString("data"));
                        return o;
                    }
                });
    }

    public ObjectSet getObjectSet(String id) {
        return db.query("SELECT * FROM ObjectSets WHERE id = ?",
                new ResultSetExtractor<ObjectSet>() {
                    public ObjectSet extractData(ResultSet rs)
                            throws SQLException {
                        if (rs.next()) {
                            ObjectSet o = new ObjectSet();
                            o.setId("" + rs.getInt("id"));
                            o.setName(rs.getString("name"));
                            o.setType(rs.getString("type"));
                            o.setData(rs.getString("data"));
                            return o;
                        } else {
                            return null;
                        }
                    }
                },
                Integer.parseInt(id));
    }

    public ObjectSet updateObjectSet(String id, ObjectSet objectSet) {
        // TODO: Implement me...which fields can be updated?
        return objectSet;
    }

    public void deleteObjectSet(String id) {
        db.update("DELETE FROM ObjectSets WHERE id = ?", Integer.parseInt(id));
    }

}